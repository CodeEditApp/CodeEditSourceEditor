{"kind":"article","sections":[],"topicSections":[{"identifiers":["doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/SourceEditor"],"anchor":"Topics"}],"metadata":{"roleHeading":"API Collection","modules":[{"name":"CodeEditSourceEditor"}],"title":"Source Editor View","role":"collectionGroup"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Usage","anchor":"Usage","type":"heading"},{"inlineContent":[{"text":"CodeEditSourceEditor provides two APIs for creating an editor: SwiftUI and AppKit. We provide a fast and efficient SwiftUI API that avoids unnecessary view updates whenever possible. It also provides extremely customizable and flexible configuration options, including two-way bindings for state like cursor positions and scroll position.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For more complex features that require access to the underlying text view or text storage, we’ve developed the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinators","type":"reference"},{"text":" API. Using this API, developers can inject custom behavior into the editor as events happen, without having to work with state or bindings.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"SwiftUI","level":4,"anchor":"SwiftUI"},{"code":["import CodeEditSourceEditor","","struct ContentView: View {","","    @State var text = \"let x = 1.0\"","    \/\/ For large documents use a text storage object (avoids SwiftUI comparisons)","    \/\/ var text: NSTextStorage","    ","    \/\/\/ Automatically updates with cursor positions, scroll position, find panel text.","    \/\/\/ Everything in this object is two-way, use it to update cursor positions, scroll position, etc.","    @State var editorState = SourceEditorState()","    ","    \/\/\/ Configure the editor's appearance, features, and editing behavior...","    @State var theme = EditorTheme(...)","    @State var font = NSFont.monospacedSystemFont(ofSize: 11, weight: .regular)","    @State var indentOption = .spaces(count: 4)","    @State var editorOverscroll = 0.3","    @State var showMinimap = true","","    \/\/\/ *Powerful* customization options with text coordinators ","    @State var autoCompleteCoordinator = AutoCompleteCoordinator()","","    var body: some View { ","        SourceEditor(","            $text,","            language: language,","            configuration: SourceEditorConfiguration(","                appearance: .init(theme: theme, font: font),","                behavior: .init(indentOption: indentOption),","                layout: .init(editorOverscroll: editorOverscroll),","                peripherals: .init(showMinimap: showMinimap)","            ),","            state: $editorState,","            coordinators: [autoCompleteCoordinator]","        )","    }","","    \/\/\/ Autocompletes \"Hello\" to \"Hello world!\" whenever it's typed.","    class AutoCompleteCoordinator: TextViewCoordinator {","        func prepareCoordinator(controller: TextViewController) { }","","        func textViewDidChangeText(controller: TextViewController) {","            for cursorPosition in controller.cursorPositions.reversed() where cursorPosition.range.location >= 5 {","                let location = cursorPosition.range.location","                let previousRange = NSRange(start: location - 5, end: location)","                let string = (controller.text as NSString).substring(with: previousRange)","","                if string.lowercased() == \"hello\" {","                    controller.textView.replaceCharacters(in: NSRange(location: location, length: 0), with: \" world!\")","                }","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","text":"AppKit","anchor":"AppKit","level":4},{"syntax":"swift","code":["var theme = EditorTheme(...)","var font = NSFont.monospacedSystemFont(ofSize: 11, weight: .regular)","var indentOption = .spaces(count: 4)","var editorOverscroll = 0.3","var showMinimap = true","","let editorController = TextViewController(","    string: \"let x = 10;\",","    language: .swift,","    config: SourceEditorConfiguration(","        appearance: .init(theme: theme, font: font),","        behavior: .init(indentOption: indentOption),","        layout: .init(editorOverscroll: editorOverscroll),","        peripherals: .init(showMinimap: showMinimap)","    ),","    cursorPositions: [CursorPosition(line: 0, column: 0)],","    highlightProviders: [], \/\/ Use the tree-sitter syntax highlighting provider by default","    undoManager: nil,","    coordinators: [], \/\/ Optionally inject editing behavior or other plugins.","    completionDelegate: nil, \/\/ Provide code suggestions while typing via a delegate object.","    jumpToDefinitionDelegate \/\/ Allow users to perform the 'jump to definition' using a delegate object.",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To add the controller to your view, add it as a child view controller and add the editor’s view to your view hierarchy."}]},{"syntax":"swift","code":["final class MyController: NSViewController {","    override func loadView() {","        super.loadView()","        let editorController: TextViewController = \/**\/","","        addChild(editorController)","        view.addSubview(editorController.view)","        editorController.view.viewDidMoveToSuperview()","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"For more AppKit API options, see the documentation on "},{"isActive":true,"identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewController","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"identifiers":["doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/SourceEditor","doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/SourceEditorConfiguration","doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/SourceEditorState","doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewController","doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/GutterView"],"anchor":"Text-View","generated":true,"title":"Text View"}],"identifier":{"url":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/SourceEditorView","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/codeeditsourceeditor\/sourceeditorview"]}],"hierarchy":{"paths":[["doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor"]]},"references":{"doc://codeeditsourceeditor.CodeEditSourceEditor/documentation/CodeEditSourceEditor/SourceEditorConfiguration":{"identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/SourceEditorConfiguration","role":"symbol","abstract":[{"type":"text","text":"Configuration object for the "},{"identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/SourceEditorView","type":"reference","isActive":true},{"type":"text","text":". Determines appearance, behavior, layout and what features are"},{"text":" ","type":"text"},{"text":"enabled (peripherals).","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SourceEditorConfiguration","kind":"identifier"}],"kind":"symbol","title":"SourceEditorConfiguration","navigatorTitle":[{"text":"SourceEditorConfiguration","kind":"identifier"}],"type":"topic","url":"\/documentation\/codeeditsourceeditor\/sourceeditorconfiguration"},"doc://codeeditsourceeditor.CodeEditSourceEditor/documentation/CodeEditSourceEditor/CodeEditTextView/TextView":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/CodeEditTextView\/TextView","title":"TextView","url":"\/documentation\/codeeditsourceeditor\/codeedittextview\/textview","fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TextView","kind":"identifier","preciseIdentifier":"c:@M@CodeEditTextView@objc(cs)TextView"}],"abstract":[],"navigatorTitle":[{"text":"TextView","kind":"identifier"}],"type":"topic"},"doc://codeeditsourceeditor.CodeEditSourceEditor/documentation/CodeEditSourceEditor/TextViewCoordinators":{"role":"article","type":"topic","url":"\/documentation\/codeeditsourceeditor\/textviewcoordinators","identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinators","title":"TextView Coordinators","abstract":[{"type":"text","text":"Add advanced functionality to CodeEditSourceEditor."}],"kind":"article"},"doc://codeeditsourceeditor.CodeEditSourceEditor/documentation/CodeEditSourceEditor/SourceEditor":{"navigatorTitle":[{"text":"SourceEditor","kind":"identifier"}],"url":"\/documentation\/codeeditsourceeditor\/sourceeditor","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SourceEditor"}],"identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/SourceEditor","title":"SourceEditor","kind":"symbol","abstract":[{"text":"A SwiftUI View that provides source editing functionality.","type":"text"}]},"doc://codeeditsourceeditor.CodeEditSourceEditor/documentation/CodeEditSourceEditor/TextViewController":{"role":"symbol","kind":"symbol","title":"TextViewController","identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewController","url":"\/documentation\/codeeditsourceeditor\/textviewcontroller","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TextViewController"}],"abstract":[{"type":"text","text":"A view controller class for managing a source editor. Uses "},{"type":"reference","identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/CodeEditTextView\/TextView","isActive":true},{"text":" for input and rendering,","type":"text"},{"type":"text","text":" "},{"text":"tree-sitter for syntax highlighting, and TextFormation for live editing completions.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"TextViewController"}],"type":"topic"},"doc://codeeditsourceeditor.CodeEditSourceEditor/documentation/CodeEditSourceEditor":{"identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor","role":"collection","abstract":[{"text":"A code editor with syntax highlighting powered by tree-sitter.","type":"text"}],"title":"CodeEditSourceEditor","kind":"symbol","type":"topic","url":"\/documentation\/codeeditsourceeditor"},"doc://codeeditsourceeditor.CodeEditSourceEditor/documentation/CodeEditSourceEditor/SourceEditorState":{"identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/SourceEditorState","role":"symbol","navigatorTitle":[{"text":"SourceEditorState","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SourceEditorState"}],"kind":"symbol","type":"topic","abstract":[],"title":"SourceEditorState","url":"\/documentation\/codeeditsourceeditor\/sourceeditorstate"},"doc://codeeditsourceeditor.CodeEditSourceEditor/documentation/CodeEditSourceEditor/SourceEditorView":{"role":"collectionGroup","title":"Source Editor View","url":"\/documentation\/codeeditsourceeditor\/sourceeditorview","kind":"article","abstract":[],"type":"topic","identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/SourceEditorView"},"doc://codeeditsourceeditor.CodeEditSourceEditor/documentation/CodeEditSourceEditor/GutterView":{"title":"GutterView","navigatorTitle":[{"kind":"identifier","text":"GutterView"}],"url":"\/documentation\/codeeditsourceeditor\/gutterview","role":"symbol","identifier":"doc:\/\/codeeditsourceeditor.CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/GutterView","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"GutterView","kind":"identifier"}],"abstract":[{"type":"text","text":"The gutter view displays line numbers that match the text view’s line indexes."},{"text":" ","type":"text"},{"type":"text","text":"This view is used as a scroll view’s ruler view. It sits on top of the text view so text scrolls underneath the"},{"type":"text","text":" "},{"type":"text","text":"gutter if line wrapping is disabled."}]}}}